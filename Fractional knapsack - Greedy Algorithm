#include<stdio.h>

typedef struct Knapsack{
    double weight;
    double profit;
}kp;

void swap(kp *k1, kp *k2){
    kp temp;
    temp=*k1;
    *k1=*k2;
    *k2=temp;
}

void sort(kp item[], int n){
    for(int i=0;i<n-1;i++){
        for(int j=0;j<n-1;j++){
            if(item[j].weight<=item[j+1].weight){
                swap(&item[j], &item[j+1]);
            }
        }
    }
}

int profit(kp item[], int n, int k){
    int max_profit=0;
    for(int i=0;i<n;i++){
        item[i].weight=item[i].profit/item[i].weight;
    }
    sort(item, n);
    for(int i=0;i<n;i++){
        if(k>0){
            if(k>(item[i].profit/item[i].weight)){
                k=k-item[i].profit/item[i].weight;
                max_profit+=item[i].profit;
                printf("%d\n", max_profit);
            }
            else{
                if(k>0){
                    max_profit+=k*item[i].weight;
                    k=0;
                }
            }
        }
        else break;
    }
    return max_profit;
}

int main(){
    kp item[]={{10,60},{20,100},{30,120}};
    int n = sizeof(item)/sizeof(item[0]);
    int k = 50;
    int ans = profit(item, n, k);
    printf("\n\n\n\n%d", ans);
    return 0;
}
